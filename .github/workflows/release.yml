name: Create Release

# This workflow creates a release when a version tag is pushed
# It also generates release notes automatically

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  pull-requests: read

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Create changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            # First release
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            # Get commits since last tag
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges $PREV_TAG..HEAD)
          fi
          
          # Group commits by type
          FEATURES=$(echo "$COMMITS" | grep -E "^- feat" || true)
          FIXES=$(echo "$COMMITS" | grep -E "^- fix" || true)
          DOCS=$(echo "$COMMITS" | grep -E "^- docs" || true)
          CHORES=$(echo "$COMMITS" | grep -E "^- chore" || true)
          OTHER=$(echo "$COMMITS" | grep -vE "^- (feat|fix|docs|chore)" || true)
          
          # Create changelog
          CHANGELOG="## What's Changed\n\n"
          
          if [ -n "$FEATURES" ]; then
            CHANGELOG="${CHANGELOG}### ✨ Features\n${FEATURES}\n\n"
          fi
          
          if [ -n "$FIXES" ]; then
            CHANGELOG="${CHANGELOG}### 🐛 Bug Fixes\n${FIXES}\n\n"
          fi
          
          if [ -n "$DOCS" ]; then
            CHANGELOG="${CHANGELOG}### 📝 Documentation\n${DOCS}\n\n"
          fi
          
          if [ -n "$CHORES" ]; then
            CHANGELOG="${CHANGELOG}### 🧹 Chores\n${CHORES}\n\n"
          fi
          
          if [ -n "$OTHER" ]; then
            CHANGELOG="${CHANGELOG}### Other Changes\n${OTHER}\n\n"
          fi
          
          # Save to file and output
          echo -e "$CHANGELOG" > RELEASE_NOTES.md
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat RELEASE_NOTES.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Get version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.version.outputs.version }}
          body: |
            # ${{ steps.version.outputs.version }}
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## Installation
            
            ```bash
            npm install x402-dev@${{ steps.version.outputs.version }}
            ```
            
            ## Deployment
            
            This release has been automatically deployed to production.
            
            **Deployed:** ${{ github.event.head_commit.timestamp }}
            **Deployed by:** @${{ github.actor }}
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update CHANGELOG.md
        run: |
          # Read current changelog
          if [ -f CHANGELOG.md ]; then
            CURRENT_CHANGELOG=$(cat CHANGELOG.md)
          else
            CURRENT_CHANGELOG="# Changelog\n\nAll notable changes to this project will be documented in this file."
          fi
          
          # Prepend new release
          echo "# Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## [${{ steps.version.outputs.version }}] - $(date +%Y-%m-%d)" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          cat RELEASE_NOTES.md >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "---" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          tail -n +2 <<< "$CURRENT_CHANGELOG" >> CHANGELOG.md

      - name: Commit CHANGELOG.md
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md
          git commit -m "docs: update CHANGELOG.md for ${{ steps.version.outputs.version }}"
          git push origin HEAD:main
        continue-on-error: true
