name: Pull Request Checks

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - main
      - develop

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  # Label PRs automatically
  label:
    name: Auto Label PR
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Label PR based on files changed
        uses: actions/labeler@v5
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

  # Run all CI checks
  pr-ci:
    name: PR CI Checks
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type check
        id: typecheck
        run: npx tsc --noEmit
        continue-on-error: true

      - name: Run ESLint
        id: lint
        run: npm run lint
        continue-on-error: true

      - name: Check formatting
        id: format
        run: npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,css,md}"
        continue-on-error: true

      - name: Run tests with coverage
        id: test
        run: npm test -- --run --coverage
        continue-on-error: true

      - name: Build project
        id: build
        run: npm run build
        continue-on-error: true

      - name: Comment PR with results
        uses: actions/github-script@v7
        with:
          script: |
            const typecheck = '${{ steps.typecheck.outcome }}' === 'success' ? '✅' : '❌';
            const lint = '${{ steps.lint.outcome }}' === 'success' ? '✅' : '❌';
            const format = '${{ steps.format.outcome }}' === 'success' ? '✅' : '❌';
            const test = '${{ steps.test.outcome }}' === 'success' ? '✅' : '❌';
            const build = '${{ steps.build.outcome }}' === 'success' ? '✅' : '❌';
            
            const body = `## Pull Request Checks\n\n` +
              `| Check | Status |\n` +
              `|-------|--------|\n` +
              `| TypeScript | ${typecheck} |\n` +
              `| ESLint | ${lint} |\n` +
              `| Prettier | ${format} |\n` +
              `| Tests | ${test} |\n` +
              `| Build | ${build} |\n\n` +
              `**Commit:** ${context.sha.substring(0, 7)}\n` +
              `**Workflow:** [${context.runNumber}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('Pull Request Checks')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

      - name: Fail if any check failed
        if: |
          steps.typecheck.outcome != 'success' ||
          steps.lint.outcome != 'success' ||
          steps.format.outcome != 'success' ||
          steps.test.outcome != 'success' ||
          steps.build.outcome != 'success'
        run: exit 1

  # Check PR size
  size-check:
    name: PR Size Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Check PR size
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const additions = pr.additions;
            const deletions = pr.deletions;
            const total = additions + deletions;
            
            let label = '';
            let message = '';
            
            if (total < 50) {
              label = 'size/XS';
              message = '👍 This is a nice small PR!';
            } else if (total < 200) {
              label = 'size/S';
              message = '✅ Good PR size.';
            } else if (total < 500) {
              label = 'size/M';
              message = '⚠️ Consider splitting this PR if possible.';
            } else if (total < 1000) {
              label = 'size/L';
              message = '⚠️ This is a large PR. Consider splitting into smaller PRs.';
            } else {
              label = 'size/XL';
              message = '🚨 This is a very large PR. Please consider splitting it.';
            }
            
            // Add label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: [label]
            });
            
            console.log(message);

  # Require PR title format
  pr-title-check:
    name: PR Title Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Check PR title format
        uses: actions/github-script@v7
        with:
          script: |
            const title = context.payload.pull_request.title;
            const pattern = /^(feat|fix|docs|style|refactor|perf|test|chore|ci)(\(.+\))?:\s.+/;
            
            if (!pattern.test(title)) {
              core.setFailed(
                '❌ PR title does not follow conventional commits format.\n' +
                'Expected format: type(scope): description\n' +
                'Types: feat, fix, docs, style, refactor, perf, test, chore, ci\n' +
                'Example: feat(api): add payment processing endpoint'
              );
            } else {
              console.log('✅ PR title follows conventional commits format');
            }
